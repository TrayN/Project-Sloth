/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panels;

import classes.Caesar;
import com.sun.jna.Native;
import com.sun.jna.Structure;
import com.sun.jna.platform.win32.User32;
import com.sun.jna.platform.win32.WinDef;
import com.sun.jna.win32.StdCallLibrary;
import forms.ScreenHolder;
import java.awt.List;
import java.util.ArrayList;

/**
 *
 * @author RAVLYK
 */
public class ActiveWindowsPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    ScreenHolder sh;
    
    public ActiveWindowsPanel() {
        initComponents();
        getActiveEveWindows();
        //WinDef.HWND hwnd = User32.INSTANCE.FindWindow("triuiScreen");
    }
    
    public ActiveWindowsPanel(ScreenHolder sh){
        this();
        this.sh = sh;
    }
    
    /*public ActiveWindowsPanel(){
        this();
        
    }*/
    
    private void getActiveEveWindows(){
        
        ArrayList <String> windowNames = new ArrayList<>();
        
        User32.instance.EnumWindows(new WndEnumProc(){
        public boolean callback(WinDef.HWND hWnd, int lParam){   
            int size = 50;
            char[] className = new char[size];
            char[] windowName = new char[size];
            
            
            //User32.instance.GetTopWindow(hWnd);
            //User32.instance.GetWindowText(hWnd, windowName, i);
            if(com.sun.jna.platform.win32.User32.INSTANCE.GetClassName(hWnd, className, size)!=0){
                //System.out.print(String.valueOf(className));
                //System.out.println(" - " + String.valueOf(className).length());
                if(String.valueOf(className).contains(Caesar.EVE_WINDOW_CLASS)){
                    com.sun.jna.platform.win32.User32.INSTANCE.GetWindowText(hWnd, windowName, size);
                    String resultName = "";
                    for(int i=0;i<windowName.length;i++){
                        resultName+=windowName[i];
                       // System.out.println((byte)windowName[i]);
                        if((i>1) && (windowName[i] == 0) && (windowName[i-1] == 0)){
                            resultName = resultName.substring(0, i-1);
                            break;
                        }
                    }
                    windowNames.add(resultName);
                }  
            }
            return true;
        }
        }, 0);
        
        jList1.setListData(windowNames.toArray());
        jList1.setSelectedIndex(0);
    }
    
    
    public static interface WndEnumProc extends StdCallLibrary.StdCallCallback {
        boolean callback (WinDef.HWND hWnd, int lParam);
    }
    
    public static interface User32 extends StdCallLibrary
    {
        final User32 instance = (User32) Native.loadLibrary ("user32", User32.class);
        boolean EnumWindows (WndEnumProc wndenumproc, int lParam);
        int GetClassName(WinDef.HWND hWnd, char[] lpClassName, int count);
        int GetWindowText(WinDef.HWND hWnd, char[] lpWindowName, int count);
        //WinDef.HWND FindWindow(String className,);
        //boolean IsWindowVisible(int hWnd);
        //void GetWindowTextA(int hWnd, byte[] buffer, int buflen);
        int GetTopWindow(WinDef.HWND hWnd);
        //int GetWindow(int hWnd, int flag);
        //final int GW_HWNDNEXT = 2;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();

        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Select Window");
        jButton1.setPreferredSize(new java.awt.Dimension(100, 25));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        this.sh.setEveWindow(jList1.getSelectedValue().toString());
    }//GEN-LAST:event_jButton1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
